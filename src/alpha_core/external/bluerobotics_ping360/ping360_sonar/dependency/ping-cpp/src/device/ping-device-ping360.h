/*
 * A device API for the Blue Robotics Ping Echosounder
 *
 *~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT EDIT
 *~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
 *
 */

#pragma once

#include "ping-device.h"

class Ping360 : public PingDevice
{
public:
    /**
     *  @brief Constructor
     *
     *  @param ser: The device I/O
     */
    Ping360(PingPort& port) : PingDevice(port) {}

    /**
     * @brief Destructor
     */
    ~Ping360();

    /**
     *  @brief Establish communications with the device, and initialize the update interval
     *
     *  @param pingIntervalMs: The interval (in milliseconds) between acoustic measurements
     *
     *  @return true if the device was initialized successfully
     */
    bool initialize();

    /**
     * @brief Reset the sonar. The bootloader may run depending on the selection according to the `bootloader` payload field. When the bootloader runs, the external LED flashes at 5Hz. If the bootloader is not contacted within 5 seconds, it will run the current program. If there is no program, then the bootloader will wait forever for a connection. Note that if you issue a reset then you will have to close all your open comm ports and go back to issuing either a discovery message for UDP or go through the break sequence for serial comms before you can talk to the sonar again.
     *
     * @param bootloader - 0 = skip bootloader; 1 = run bootloader
     * @param reserved - reserved
     */
    void set_reset(uint8_t bootloader, uint8_t reserved);

    /**
     * @brief The transducer will apply the commanded settings. The sonar will reply with a `ping360_data` message. If the `transmit` field is 0, the sonar will not transmit after locating the transducer, and the `data` field in the `ping360_data` message reply will be empty. If the `transmit` field is 1, the sonar will make an acoustic transmission after locating the transducer, and the resulting data will be uploaded in the `data` field of the `ping360_data` message reply. To allow for the worst case response time the command timeout should be set to 4000 msec.
     *
     * @param mode - Operating mode (1 for Ping360)
     * @param gain_setting - Analog gain setting (0 = low, 1 = normal, 2 = high)
     * @param angle - Units: gradian; Head angle
     * @param transmit_duration - Units: microsecond; Acoustic transmission duration (1~1000 microseconds)
     * @param sample_period - Time interval between individual signal intensity samples in 25nsec increments (80 to 40000 == 2 microseconds to 1000 microseconds)
     * @param transmit_frequency - Units: kHz; Acoustic operating frequency. Frequency range is 500kHz to 1000kHz, however it is only practical to use say 650kHz to 850kHz due to the narrow bandwidth of the acoustic receiver.
     * @param number_of_samples - Number of samples per reflected signal
     * @param transmit - 0 = do not transmit; 1 = transmit after the transducer has reached the specified angle
     * @param reserved - reserved
     */
    void set_transducer(uint8_t mode, uint8_t gain_setting, uint16_t angle, uint16_t transmit_duration, uint16_t sample_period, uint16_t transmit_frequency, uint16_t number_of_samples, uint8_t transmit, uint8_t reserved);

    /**
     * @brief Extended *transducer* message with auto-scan function. The sonar will automatically scan the region between start_angle and end_angle and send auto_device_data messages as soon as new data is available. Send a line break to stop scanning (and also begin the autobaudrate procedure). Alternatively, a motor_off message may be sent (but retrys might be necessary on the half-duplex RS485 interface).
     *
     * @param mode - Operating mode (1 for Ping360)
     * @param gain_setting - Analog gain setting (0 = low, 1 = normal, 2 = high)
     * @param transmit_duration - Units: microsecond; Acoustic transmission duration (1~1000 microseconds)
     * @param sample_period - Time interval between individual signal intensity samples in 25nsec increments (80 to 40000 == 2 microseconds to 1000 microseconds)
     * @param transmit_frequency - Units: kHz; Acoustic operating frequency. Frequency range is 500kHz to 1000kHz, however it is only practical to use say 650kHz to 850kHz due to the narrow bandwidth of the acoustic receiver.
     * @param number_of_samples - Number of samples per reflected signal
     * @param start_angle - Units: gradian; Head angle to begin scan sector for autoscan in gradians (0~399 = 0~360 degrees).
     * @param stop_angle - Units: gradian; Head angle to end scan sector for autoscan in gradians (0~399 = 0~360 degrees).
     * @param num_steps - Units: gradian; Number of 0.9 degree motor steps between pings for auto scan (1~10 = 0.9~9.0 degrees)
     * @param delay - Units: millisecond; An additional delay between successive transmit pulses (0~100 ms). This may be necessary for some programs to avoid collisions on the RS485 USRT.
     */
    void set_auto_transmit(uint8_t mode, uint8_t gain_setting, uint16_t transmit_duration, uint16_t sample_period, uint16_t transmit_frequency, uint16_t number_of_samples, uint16_t start_angle, uint16_t stop_angle, uint8_t num_steps, uint8_t delay);

    /**
     * @brief The sonar switches the current through the stepper motor windings off to save power. The sonar will send an ack message in response. The command timeout should be set to 50 msec. If the sonar is idle (not scanning) for more than 30 seconds then the motor current will automatically turn off. When the user sends any command that involves moving the transducer then the motor current is automatically re-enabled.
     *
     */
    void set_motor_off();


    //! [NOT RELEASED] Extended version of *device_data* with *auto_transmit* information. The sensor emits this message when in *auto_transmit* mode.
    struct {
        // Operating mode (1 for Ping360)
        uint8_t mode;
        // Analog gain setting (0 = low, 1 = normal, 2 = high)
        uint8_t gain_setting;
        // Head angle
        uint16_t angle;
        // Acoustic transmission duration (1~1000 microseconds)
        uint16_t transmit_duration;
        // Time interval between individual signal intensity samples in 25nsec increments (80 to 40000 == 2 microseconds to 1000 microseconds)
        uint16_t sample_period;
        // Acoustic operating frequency. Frequency range is 500kHz to 1000kHz, however it is only practical to use say 650kHz to 850kHz due to the narrow bandwidth of the acoustic receiver.
        uint16_t transmit_frequency;
        // Head angle to begin scan sector for autoscan in gradians (0~399 = 0~360 degrees).
        uint16_t start_angle;
        // Head angle to end scan sector for autoscan in gradians (0~399 = 0~360 degrees).
        uint16_t stop_angle;
        // Number of 0.9 degree motor steps between pings for auto scan (1~10 = 0.9~9.0 degrees)
        uint8_t num_steps;
        // An additional delay between successive transmit pulses (0~100 ms). This may be necessary for some programs to avoid collisions on the RS485 USRT.
        uint8_t delay;
        // Number of samples per reflected signal
        uint16_t number_of_samples;
        // An array of return strength measurements taken at regular intervals across the scan region. The first element is the closest measurement to the sensor, and the last element is the farthest measurement in the scanned range.
        uint8_t* data = nullptr;
        uint16_t data_length = 0;
    } auto_device_data_data;

    //! This message is used to communicate the current sonar state. If the data field is populated, the other fields indicate the sonar state when the data was captured. The time taken before the response to the command is sent depends on the difference between the last angle scanned and the new angle in the parameters as well as the number of samples and sample interval (range). To allow for the worst case reponse time the command timeout should be set to 4000 msec.
    struct {
        // Operating mode (1 for Ping360)
        uint8_t mode;
        // Analog gain setting (0 = low, 1 = normal, 2 = high)
        uint8_t gain_setting;
        // Head angle
        uint16_t angle;
        // Acoustic transmission duration (1~1000 microseconds)
        uint16_t transmit_duration;
        // Time interval between individual signal intensity samples in 25nsec increments (80 to 40000 == 2 microseconds to 1000 microseconds)
        uint16_t sample_period;
        // Acoustic operating frequency. Frequency range is 500kHz to 1000kHz, however it is only practical to use say 650kHz to 850kHz due to the narrow bandwidth of the acoustic receiver.
        uint16_t transmit_frequency;
        // Number of samples per reflected signal
        uint16_t number_of_samples;
        // An array of return strength measurements taken at regular intervals across the scan region. The first element is the closest measurement to the sensor, and the last element is the farthest measurement in the scanned range.
        uint8_t* data = nullptr;
        uint16_t data_length = 0;
    } device_data_data;


private:
    /**
     *  @brief Handle an incoming message from the device. Internal values are updated according to the device data.
     *
     *  @param message: A pointer to the message received from the device
     */
    void _handleMessage(const ping_message* message) override;
};